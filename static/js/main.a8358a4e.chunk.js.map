{"version":3,"sources":["penguins.jpg","gits.svg","linkln2.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","BrowserRouter","className","Link","to","src","penguins","alt","git","height","link","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uTCmCzBC,mLAxBX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAY,OAEfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,aACjBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,QACjBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAK,aACXN,EAAAC,EAAAC,cAAA,OAAMK,IAAOC,IAAUC,IAAM,eAE7BT,EAAAC,EAAAC,cAAA,OAAKE,UAAY,SAAQJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAK,aAAX,0CACzBN,EAAAC,EAAAC,cAAA,OAAKE,UAAY,SAAjB,+BAIAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,cACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAW,SAAQJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAK,aAAX,IAAwBN,EAAAC,EAAAC,cAAA,OAAKK,IAAOG,IAAKC,OAAQ,MAAMF,IAAM,kBACrFT,EAAAC,EAAAC,cAAA,OAAKE,UAAY,SAAjB,IAA0BJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAK,aAAX,IAAwBN,EAAAC,EAAAC,cAAA,OAAKK,IAAOK,IAAMH,IAAM,4BAlBlEI,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a8358a4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/penguins.56080fc8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gits.96f4c70d.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkln2.5b238434.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link} from 'react-router-dom';\nimport penguins from './penguins.jpg'\nimport git from './gits.svg'\nimport link from './linkln2.svg'\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className = \"App\">\n\n        <div className = \"container\">\n        <div className = \"item\">\n        <Link to = '/about-me'>\n        < img src = {penguins} alt = \"penguins\"/>\n        </Link></div>\n        <div className = \"item2\"><Link to = \"/about-me\"> Web Developer, JavaScript, HTML, CSS</Link></div>\n        <div className = \"item3\">Jinaka.Ugochukwu@gmail.com</div>\n        </div>\n        \n        \n        <div className = \"container2\">\n          <div className =\"item4\"><Link to = \"/about-me\"> <img src = {git} height =\"200\" alt = \"github logo\"/></Link></div>\n          <div className = \"item4\"> <Link to = \"/about-me\"> <img src = {link} alt = \"linkln logo\"/></Link></div>   \n         \n</div>\n      </div> \n      </Router>        \n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}